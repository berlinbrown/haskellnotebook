;;;
;;; Berlin Brown
;;; 10/5/2005
;;; accesslog-parser.lisp
;;;
;;; This module parses access_log documents generated by the Apache2
;;; webserver.  It will collect vital stats on your server's web
;;; activity.
;;;
;;; 10/5/2005:
;;;  - added read-from-string for converting to a list
;;;

(in-package :simple-codegen)

;; Default file name to parse 
;; example_access_log.txt and access_log
(defparameter *access-file-name* 
  (let ((prop-file (property-parse-logfile)))
    (if prop-file
	prop-file	            
	"../logs/access_log")))

;; save file-count stats
(defparameter
  *log-file-stats* nil)
(progn
  (setf *log-file-stats* (make-instance 'file-stats 
				       :file-count 0 
				       :time-proc 0)))

;;
;; Standard approach for parsing a file, read
;; line-by-line
(defun read-access-all (*db-streams* infile)
  " Read the entire file and print. "
  (loop for line = (read-line infile nil)
	while line 
	do
	(progn
	  (unwind-protect 
	      (inc-lines *log-file-stats*)
	    (parse-line *db-streams* line 
			(lines-proc *log-file-stats*)
			(make-instance
			 'java-line-parser :cur-line line)))
	  )))

(defun parse-access-file (*db-streams* filename)
  (with-open-file (in-file filename :if-does-not-exist :ERROR)
		  (read-access-all *db-streams* in-file)))

;;------------------------------------------------
;; Database creation:
;;------------------------------------------------

;;------------------------------------------------
;; run-parser-main:
;;------------------------------------------------
(defun run-parser-main ()
  (stime *log-file-stats*)
  ; see the accesslog-database for more on the tables
  (with-open-file (strm-ip *database-ip*
			   :direction :output :if-exists :supersede)
    (with-open-file (strm-access *database-access*
			     :direction :output :if-exists :supersede)
      (let ((*db-streams* (make-instance '*database-streams*)))
	(setf (db-stream-ip *db-streams*) strm-ip)
	(setf (db-stream-access *db-streams*) strm-access)
	;; Start the parse file system
	(parse-access-file *db-streams* *access-file-name*)
	(etime *log-file-stats*)
	(print-stats *log-file-stats*)
	;; Post analysis of the access content
	(generate-tables *db-streams*)
	))))  

;; Entry point into the system
(run-parser-main)

;; End of File 